name: Test

on:
  push:
    branches:
      - master  # Trigger on pushes to the master branch
  pull_request:
    types:
      - opened
      - synchronize  # Trigger on pull request creation or update

jobs:
  test:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      # Step 1: Checkout code
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Step 3: Build Docker containers
      - name: Build Docker containers
        run: docker compose build

      # Step 4: Clean up previous containers (if any)
      - name: Clean up old containers
        run: docker compose down -v --remove-orphans

      # Step 5: Start Docker containers in detached mode
      - name: Start Docker containers
        run: docker compose up -d

      # Step 6: Run linting
      - name: Lint code
        run: docker compose exec -T backend bash /app/scripts/format.sh

      # Step 7: Run tests with coverage
      - name: Run tests
        run: docker compose exec -T backend bash /app/tests-start.sh "Coverage for ${{ github.sha }}"

      # Step 8: Tear down containers after tests
      - name: Tear down Docker containers
        run: docker compose down -v --remove-orphans

      # Step 9: Store coverage files as an artifact
      - name: Store coverage files
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html  # Artifact name
          path: backend/htmlcov  # Directory containing coverage HTML files

  alls-green:
    # A lightweight job to indicate overall status for branch protection
    if: always()  # Always run this job, even if the `test` job fails
    needs:
      - test  # Depends on the outcome of the `test` job
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}  # Pass all dependencies as input
